---
description: 
globs: 
alwaysApply: true
---
# 🧪 **MANDATORY TESTING PROGRESSION RULES**


---

## **🚫 TASK PROGRESSION BLOCKING RULES**

### **MANDATORY: No Next Task Until Tests Pass**

```typescript
/**
 * CURSOR AI RULE: NEVER proceed to next task until ALL tests pass
 */

const taskProgressionGate = {
  // HARD STOP: These must pass before next task
  mandatoryChecks: [
    '🧪 All unit tests pass (100%)',
    '🔗 Integration tests pass (if applicable)', 
    '♿ Accessibility tests pass (WCAG AA)',
    '📱 Responsive tests pass (3 breakpoints)',
    '🎨 Visual regression tests pass',
    '⚡ Performance benchmarks met'
  ],

  // BLOCKING RULE: If ANY test fails
  onTestFailure: {
    action: 'STOP_DEVELOPMENT',
    requirement: 'FIX_ALL_FAILING_TESTS_FIRST',
    documentation: 'DOCUMENT_ROOT_CAUSE_AND_SOLUTION',
    nextStep: 'RERUN_FULL_TEST_SUITE'
  },

  // ONLY proceed when:
  proceedConditions: [
    '✅ All tests green/passing',
    '✅ Code coverage meets threshold',
    '✅ No console errors in browser',
    '✅ No TypeScript errors',
    '✅ Manual testing completed'
  ]
};
```

---

## **🔬 MICRO/NANO TASK TESTING REQUIREMENTS**

### **Every Small Task Testing Pattern**

```typescript
// MICRO TASK (30min - 2hrs): Quick validation required
const microTaskTesting = {
  beforeNext: [
    '🔍 Unit test added/updated',
    '🖥️ Manual browser test completed',
    '📋 Function works as specified',
    '🚨 No new console errors',
    '📝 Test results documented'
  ],
  
  testingTime: '10-15 minutes',
  passCriteria: 'Feature works + no regressions',
  
  example: `
    // MICRO TASK: Add loading state to button
    // TESTS REQUIRED:
    test('button shows spinner when loading', () => {
      render(<Button loading={true} />);
      expect(screen.getByTestId('spinner')).toBeInTheDocument();
    });
    
    // MANUAL TEST:
    ✅ Click button → spinner appears
    ✅ Loading completes → spinner disappears  
    ✅ No console errors
    ✅ Responsive on mobile
  `
};

// NANO TASK (<30min): Minimal validation required  
const nanoTaskTesting = {
  beforeNext: [
    '👀 Visual inspection completed',
    '🔧 Function works as expected',
    '🚨 No breaking changes introduced'
  ],
  
  testingTime: '2-5 minutes',
  passCriteria: 'Change works + no obvious breaks',
  
  example: `
    // NANO TASK: Change button color to blue
    // TESTS REQUIRED:
    ✅ Button appears blue visually
    ✅ Hover state still works
    ✅ No CSS conflicts introduced
  `
};
```

---

## **📊 MACRO TASK COMPREHENSIVE TESTING**

### **Full Feature Testing Requirements**

```typescript
/**
 * MACRO TASK (Goal level): Comprehensive testing required
 * Examples: "Complete Cart System", "Full Checkout Flow", "Admin Dashboard"
 */

const macroTaskTesting = {
  // COMPREHENSIVE TEST SUITE REQUIRED:
  fullTestSuite: [
    '🧪 Unit Tests (95%+ coverage)',
    '🔗 Integration Tests (all API calls)',
    '🌐 End-to-End Tests (full user flow)',
    '♿ Accessibility Audit (automated + manual)',
    '📱 Cross-Device Testing (mobile/tablet/desktop)',
    '🌍 Cross-Browser Testing (Chrome/Firefox/Safari)',
    '⚡ Performance Testing (Core Web Vitals)',
    '🔒 Security Testing (auth, validation, XSS)',
    '🎨 Visual Regression Testing (screenshot comparison)',
    '💾 Data Integrity Testing (database operations)'
  ],

  testingTime: '4-8 hours for full macro task',
  passCriteria: 'ALL tests pass + user acceptance criteria met',
  
  blockingRequirements: [
    'No failing tests allowed',
    'Performance benchmarks met',
    'Accessibility compliance verified',
    'Cross-browser compatibility confirmed',
    'Security vulnerabilities addressed'
  ]
};
```

### **Macro Task Test Categories**

```typescript
// GOAL 1: Infrastructure Testing (Macro)
const infrastructureMacroTesting = {
  testCategories: [
    {
      category: 'Database Integrity',
      tests: [
        'All tables created correctly',
        'Foreign key relationships work',
        'RLS policies prevent unauthorized access',
        'Indexes improve query performance',
        'Data migrations work forward/backward'
      ]
    },
    {
      category: 'API Functionality', 
      tests: [
        'All endpoints respond correctly',
        'Authentication works across all APIs',
        'Error handling consistent',
        'Rate limiting prevents abuse',
        'Input validation prevents injection'
      ]
    },
    {
      category: 'Environment Setup',
      tests: [
        'All environment variables loaded',
        'External services connect (Stripe, Supabase)',
        'Development/staging/production configs work',
        'CI/CD pipeline executes successfully'
      ]
    }
  ]
};

// GOAL 2: Frontend Components Testing (Macro)
const frontendMacroTesting = {
  testCategories: [
    {
      category: 'Component Functionality',
      tests: [
        'All props render correctly',
        'Event handlers trigger appropriate actions',
        'State management works consistently',
        'Error boundaries catch component errors',
        'Loading states provide feedback'
      ]
    },
    {
      category: 'User Experience',
      tests: [
        'Navigation flows work intuitively', 
        'Form validation provides clear feedback',
        'Search and filtering work accurately',
        'Cart operations persist across sessions',
        'Brand theming applies consistently'
      ]
    },
    {
      category: 'Visual Design',
      tests: [
        'Responsive design works on all devices',
        'Brand colors apply correctly',
        'Typography scales appropriately',
        'Images load and display properly',
        'Animations perform smoothly'
      ]
    }
  ]
};

// GOAL 3: Backend Integration Testing (Macro)
const backendMacroTesting = {
  testCategories: [
    {
      category: 'Data Operations',
      tests: [
        'CRUD operations work for all entities',
        'Complex queries return accurate results',
        'Transactions maintain data consistency',
        'Bulk operations handle large datasets',
        'Caching improves performance'
      ]
    },
    {
      category: 'External Integrations',
      tests: [
        'Stripe payments process correctly',
        'Webhook events update database',
        'Email notifications send successfully',
        'File uploads store securely',
        'Search functionality returns relevant results'
      ]
    },
    {
      category: 'Security & Performance',
      tests: [
        'Authentication prevents unauthorized access',
        'Input sanitization prevents attacks',
        'API responses meet performance targets',
        'Database queries execute efficiently',
        'Error handling doesn\'t leak sensitive data'
      ]
    }
  ]
};
```

---

## **📋 TESTING CHECKPOINT DOCUMENTATION**

### **Required Test Result Documentation**

```typescript
/**
 * CURSOR AI MUST document test results before proceeding
 */

const testDocumentationTemplate = `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🧪 TESTING CHECKPOINT: [Task Name]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📅 DATE: [Current Date/Time]
🎯 TASK: [Specific task from implementation plan]
⏱️ TESTING TIME: [Time spent testing]

UNIT TESTS:
✅ [Test 1 name] - PASSED
✅ [Test 2 name] - PASSED  
❌ [Test 3 name] - FAILED: [Reason + fix applied]

INTEGRATION TESTS:
✅ [Integration 1] - PASSED
✅ [Integration 2] - PASSED

MANUAL TESTS:
✅ Mobile responsive (375px) - PASSED
✅ Tablet responsive (768px) - PASSED
✅ Desktop responsive (1024px+) - PASSED
✅ Chrome browser - PASSED
✅ Firefox browser - PASSED

ACCESSIBILITY TESTS:
✅ Screen reader compatible - PASSED
✅ Keyboard navigation - PASSED
✅ Color contrast WCAG AA - PASSED

PERFORMANCE TESTS:
✅ Page load < 2s - PASSED
✅ API response < 500ms - PASSED

🔍 ISSUES FOUND & RESOLVED:
- Issue 1: [Description] → Fixed by [Solution]
- Issue 2: [Description] → Fixed by [Solution]

🚦 OVERALL STATUS: ✅ PASSED - SAFE TO PROCEED
🚦 NEXT TASK: [Next task name from implementation plan]

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;
```

---

## **🔄 TESTING AUTOMATION RULES**

### **Automated Test Execution**

```typescript
const automatedTestingRules = {
  // RUN automatically before next task:
  automatedChecks: [
    'npm run test:unit',        // All unit tests
    'npm run test:integration', // Integration tests
    'npm run lint',            // Code quality
    'npm run type-check',      // TypeScript validation
    'npm run build',           // Build succeeds
    'npm run test:e2e'         // End-to-end (for macro tasks)
  ],

  // BLOCKING: If any command fails
  onAutomatedFailure: {
    action: 'HALT_DEVELOPMENT',
    requirement: 'FIX_ALL_ISSUES_FIRST',
    retestRequired: true,
    documentFailures: true
  },

  // Script for testing checkpoint:
  testingScript: `
    #!/bin/bash
    echo "🧪 Running testing checkpoint..."
    
    # Unit tests
    npm run test:unit || exit 1
    echo "✅ Unit tests passed"
    
    # Integration tests  
    npm run test:integration || exit 1
    echo "✅ Integration tests passed"
    
    # Build check
    npm run build || exit 1
    echo "✅ Build successful"
    
    # Type checking
    npm run type-check || exit 1
    echo "✅ TypeScript validation passed"
    
    echo "🎉 All automated tests passed! Safe to proceed."
  `
};
```

### **Manual Testing Checklist**

```typescript
const manualTestingChecklist = {
  // REQUIRED for every UI task:
  uiTesting: [
    '👆 Click all interactive elements',
    '⌨️ Test keyboard navigation',
    '📱 Test on actual mobile device',
    '🖥️ Test on actual desktop',
    '🔄 Test loading states',
    '❌ Test error states',
    '🎨 Verify brand theming works',
    '♿ Test with screen reader'
  ],

  // REQUIRED for every API task:
  apiTesting: [
    '📨 Test with valid inputs',
    '⚠️ Test with invalid inputs',
    '🔒 Test authentication required',
    '💾 Verify database changes',
    '📊 Check response format',
    '⏱️ Measure response time',
    '🚫 Test error scenarios'
  ],

  // DOCUMENTATION: Record results
  recordResults: 'Document all manual test results in testing checkpoint'
};
```

---

## **🎯 MACRO TASK ACCEPTANCE CRITERIA**

### **User Acceptance Testing Requirements**

```typescript
const macroTaskAcceptanceCriteria = {
  // GOAL 1: Complete Cart System
  cartSystemAcceptance: {
    userStories: [
      '✅ User can add products to cart',
      '✅ User can view cart contents', 
      '✅ User can update quantities',
      '✅ User can remove items',
      '✅ Cart persists across sessions',
      '✅ Cart shows accurate totals',
      '✅ Cart works on all devices'
    ],
    technicalRequirements: [
      '✅ All cart API endpoints work',
      '✅ Database operations are atomic',
      '✅ Error handling is comprehensive',
      '✅ Performance meets benchmarks',
      '✅ Security prevents manipulation'
    ]
  },

  // GOAL 2: Complete Checkout Flow
  checkoutFlowAcceptance: {
    userStories: [
      '✅ User can initiate checkout',
      '✅ User redirected to Stripe',
      '✅ Payment processes successfully',
      '✅ Order created in database',
      '✅ Inventory updated correctly',
      '✅ User sees confirmation',
      '✅ Email notification sent'
    ],
    technicalRequirements: [
      '✅ Stripe integration secure',
      '✅ Webhook handles all events',
      '✅ Database transactions atomic',
      '✅ Error recovery robust',
      '✅ Idempotency prevents duplicates'
    ]
  }
};
```

---

## **🚨 TESTING FAILURE PROTOCOLS**

### **When Tests Fail**

```typescript
const testFailureProtocol = {
  // IMMEDIATE actions when ANY test fails:
  immediateActions: [
    '🛑 STOP current development',
    '📝 Document the failure details',
    '🔍 Analyze root cause',
    '🔧 Implement fix',
    '🧪 Rerun ALL affected tests',
    '✅ Verify fix doesn\'t break anything else'
  ],

  // NEVER do this when tests fail:
  prohibitedActions: [
    '❌ Continue to next task',
    '❌ Skip the failing test',
    '❌ Comment out the test',
    '❌ Lower test expectations',
    '❌ Ignore accessibility failures',
    '❌ Defer performance fixes'
  ],

  // Root cause analysis template:
  rootCauseTemplate: `
    TESTING FAILURE ANALYSIS:
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    📅 FAILURE DATE: [Date/Time]
    🧪 FAILED TEST: [Test name]
    📝 FAILURE MESSAGE: [Error message]
    
    🔍 ROOT CAUSE:
    [Detailed analysis of why test failed]
    
    🔧 SOLUTION APPLIED:
    [Specific changes made to fix]
    
    🧪 VERIFICATION:
    [How the fix was tested]
    
    🛡️ PREVENTION:
    [Changes to prevent similar failures]
    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  `
};
```

---

**✅ COMPREHENSIVE TESTING PROGRESSION RULES:**
- [x] **No next task until ALL tests pass** (blocking rule)
- [x] **Micro task testing requirements** (10-15 min validation)
- [x] **Nano task testing requirements** (2-5 min validation)
- [x] **Macro task comprehensive testing** (4-8 hour full suite)
- [x] **Automated testing checkpoints** (scripts that must pass)
- [x] **Manual testing checklists** (UI/API validation)
- [x] **Test result documentation** (required before proceeding)
- [x] **Failure protocols** (what to do when tests fail)
- [x] **User acceptance criteria** (macro task completion)

**🎯 Cursor AI will now NEVER proceed without complete testing validation at every level!**


