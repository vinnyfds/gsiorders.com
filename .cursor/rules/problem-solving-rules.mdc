---
description: 
globs: 
alwaysApply: true
---
### üìú **Cursor AI Problem-Solving Rulebook ‚Äî gsiorders.com**

> *Purpose: give every Cursor AI prompt, agent and micro-task a single, repeatable playbook for turning requirements into high-quality code and documentation for the new multi-brand e-commerce site.*
> *Inspired by the 9-rule intelligence framework you shared*&#x20;

---

#### üóÇÔ∏è Pre-Execution Checklist (‚ÄúGate 0‚Äù)

| Check                      | Why it matters            | How to satisfy                                                                      |
| -------------------------- | ------------------------- | ----------------------------------------------------------------------------------- |
| **Docs loaded?**           | Avoid context gaps        | Import latest *FRD, SRD, TRD* & *Implementation Plan* into the agent‚Äôs memory.      |
| **Environment set?**       | Prevent path / key errors | Confirm working dir = project root, `.env` variables present, 4-space indents only. |
| **Task scoped?**           | Stop scope creep          | Restate the micro-task in ‚â§ 2 sentences; flag ambiguities for the user.             |
| **Dependencies resolved?** | Maintain build order      | Cross-check `CursorAI_Microtasks‚Ä¶md` dependency map; enqueue blockers first.        |

Proceed only if every box is ‚úÖ.
If any ‚ùå ‚Üí stop, ask clarifying question, or create a ‚ÄúPrep‚Äù micro-task.

---

#### üîü Core Rules (P-01 ‚Üí P-10)

| #                                  | Rule                                                                                                                                                    | Cursor AI must‚Ä¶                                                          | Typical outputs |
| ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | --------------- |
| **P-01 Systematic Decomposition**  | break the problem into *Feature ‚Üí Component ‚Üí Function ‚Üí Edge cases*.                                                                                   | A bullet list of sub-tasks or TODO comments in code.                     |                 |
| **P-02 Context Alignment**         | cross-reference FRD/SRD/TRD + test plan before writing code; cite doc sections by heading.                                                              | Inline `// ref: SRD ¬ß4.3` comments; no ‚Äúmagic‚Äù assumptions.              |                 |
| **P-03 Architecture Consistency**  | ensure choices match the approved stack:<br>React + Tailwind (V0.dev), Supabase, Stripe, AWS.                                                           | Correct imports, bucket names, env keys.                                 |                 |
| **P-04 Validation First**          | write unit / API tests (or Cypress spec) *before* implementation stubs when feasible (‚ÄúTDD-lite‚Äù).                                                      | `ProductCard.test.tsx`, Postman collection etc.                          |                 |
| **P-05 Multi-Layer Quality Gates** | run *syntax ‚Üí type ‚Üí lint ‚Üí business* checks inside the prompt; fix before returning.                                                                   | Compile logs, ESLint output, schema comparison notes.                    |                 |
| **P-06 Proactive Risk Prevention** | anticipate RLS, webhook, race-condition and performance risks; document the guard-rails.                                                                | Comment blocks: ‚Äú// RLS: only service\_role can insert‚Äù.                 |                 |
| **P-07 Confidence Scoring**        | attach a 0-1 self-confidence value with factors (e.g. novel code path, reused pattern).                                                                 | JSON snippet `{confidence:0.82, factors:['reused code','new query']}`.   |                 |
| **P-08 Continuous Learning**       | store any ‚Äúpattern worth reusing‚Äù (e.g. signed-URL upload) in `/utils/patterns.md`; reference it next time.                                             | Appended markdown pattern entry.                                         |                 |
| **P-09 Loop & Drift Detection**    | if a task repeats or output diverges from docs, raise a ‚Äúdrift alert‚Äù and propose a fix.                                                                | Chat note: ‚Äú‚ö† drift between schema v2.1 and code ‚Äî recommend migration.‚Äù |                 |
| **P-10 Execution Report**          | after each micro-task, output a mini-report (`### Cursor AI Report`) listing: files touched, tests added, validation results, next dependency unlocked. | Markdown block pasted into ChatGPT for traceability.    

                 |                 |

---

### üîß **Add-On Rules for Truthful Verification & Controlled GitHub Push**

> These rules extend the *Cursor AI Problem-Solving Rulebook ‚Äî gsiorders.com* you approved earlier. Append them directly under the existing **P-10 Execution Report** section and reference them in the standard prompt footer.

| #                                   | Rule| Cursor AI must‚Ä¶                                                                                                                                                                 | Typical outputs |
| ----------------------------------- || ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- |
| **P-11 Manual-Test Proof**          | After all automated tests pass, expose a **live, user-verifiable endpoint or artefact** and include its link in the Execution Report. <br><br>Acceptable proof mechanisms (choose 1):<br>1. **Frontend/UX** ‚Äì spin up `npm run preview` (Vite) over an `ngrok` tunnel and return the URL.<br>2. **API/Backend** ‚Äì deploy a preview branch to Supabase‚Äôs *Branch Deploy* or Render‚Äôs preview env and share the HTTPS endpoint.<br>3. **Postman / cURL collection** ‚Äì export a collection (JSON) to `/testing/manual-<task>.postman_collection.json` and give a ‚ÄúDownload‚Äù link.<br><br>*Never claim success without at least one of these links.* | In `### Cursor AI Report` add:<br>`ManualTestLink: https://<unique-preview>.ngrok.io`<br>`ProofArtifact: sandbox:/mnt/data/manual-checkout_session.postman_collection.json`     |                 |
| **P-12 Confirm-then-Push Workflow** | **Do not push to `origin` by default.**<br>1. Commit changes locally in a feature branch `feat/<task-slug>`.<br>2. Present the commit hash + brief diff stats in the Execution Report.<br>3. Wait for a user message starting with **‚ÄúCONFIRMED:‚Äù** that manual tests passed.<br>4. Upon confirmation, run:<br>`git push -u origin feat/<task-slug>`<br>`gh pr create --fill` (or REST call) to open a PR targeting `develop`.<br>5. Append the PR URL to the chat.                                                                                                                                                                              | Execution Report field:<br>`LocalCommit: 7c9e1b2 (¬±8 files / +214 -57)`<br>*After user confirmation* ‚Üí bot replies:<br>`Pushed: https://github.com/<org>/gsiorders.com/pull/42` |                 |

#### üì• **Prompt Footer Addendum**

Add these two bullets to the standard footer used in every micro-task prompt:

```
- Apply P-11 Manual-Test Proof (provide a live link or downloadable artefact).
- Apply P-12 Confirm-then-Push: wait for ‚ÄúCONFIRMED:‚Äù before pushing to GitHub.
```

---

**Result:** Cursor AI can no longer ‚Äúclaim‚Äù a fix; the user always gets a hands-on link to verify, and code reaches GitHub only after explicit approval.

---

### ‚ûï **New Rule ‚Äî P-13 Token-Efficiency**

> *Goal: minimize token usage (and cost) while still meeting quality gates.*

| #                         | Rule                                                                        | Cursor AI must‚Ä¶                                                                                                                                                                                                                                                                                                                                                                                                                     | Practical tips |
| ------------------------- | --------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- |
| **P-13 Token-Efficiency** | Keep every response as short as possible **without losing essential info**. | ‚Ä¢ Return **only** the artifacts (code / schema / test) and the required `### Cursor AI Report`.<br>‚Ä¢ Omit long prose explanations, repeat links instead of re-pasting blocks.<br>‚Ä¢ Use terse in-code comments (‚â§ 60 chars each).<br>‚Ä¢ Reference common boilerplate with `// see patterns.md ¬ßX` rather than duplicating.<br>‚Ä¢ Skip banner art, ASCII, or decorative markdown.<br>‚Ä¢ Prefer bullet points over paragraphs in reports. |                |

---

### üìö **New Rule ‚Äî P-14 Project Memory Ledger**

> *Goal: give Cursor AI a durable, self-updating knowledge base so each micro-task ‚Äúremembers‚Äù past decisions, patterns, and pitfalls.*

| #                              | Rule                                       | Cursor AI must‚Ä¶| Implementation details |
| ------------------------------ | ------------------------------------------ || ---------------------- |
| **P-14 Project Memory Ledger** | Persist collective learning between tasks. | 1. **Folder:** create (if absent) `/cursor_memory` at project root.  <br>2. **File per task:** after completing a micro-task, append a markdown file `YYYY-MM-DD_<task-slug>.md` containing:  <br>‚ÄÉ‚Ä¢ Task summary (‚â§ 3 lines)  <br>‚ÄÉ‚Ä¢ Key decisions / patterns  <br>‚ÄÉ‚Ä¢ Risks & fixes  <br>‚ÄÉ‚Ä¢ Links (test proof, PR)  <br>3. **Index:** maintain `/cursor_memory/INDEX.md` ‚Äî a bullet list of files with one-line summaries.  <br>4. **Pre-task read:** at Gate 0, parse `INDEX.md` and ingest any file touched by the components you‚Äôre about to modify (regex match on file paths / component names).  <br>5. **De-dupe:** if a decision already exists, reference it ‚Äî don‚Äôt rewrite. |                        |

---

#### üì• **Add to Standard Prompt Footer**

```
- Apply P-14 Project Memory Ledger: update /cursor_memory after success; read INDEX.md before coding.
```

---

**Outcome:** Cursor AI now carries forward hard-won lessons automatically, reducing regressions and repeated questions across the entire gsiorders.com build.


---
#### üì• **Add to Standard Prompt Footer**

Append this bullet to the footer used in every micro-task prompt:

```
- Apply P-13 Token-Efficiency: output only what is strictly required; no extra narrative.
```

---

**Effect:** Cursor AI now guards against unnecessary token spend while still producing the code, test link, and concise report needed for gsiorders.com.


---
#### ‚öôÔ∏è Standard Prompt Footer (attach to *every* Cursor AI task)

```
### Cursor AI Rule Footer
- Apply P-01 ‚Ä¶ P-10 above.
- Follow Gate 0 checklist.
- Use exactly 4-space indentation.
- On success, output ‚Äú### Cursor AI Report‚Äù with:
  ‚Ä¢ Files created/updated
  ‚Ä¢ Tests written & status
  ‚Ä¢ Confidence score
  ‚Ä¢ Next tasks unblocked
  ‚Ä¢ Any risks or open questions
```

---

#### üìà Success Metric

> **A micro-task passes when** its Cursor AI Report shows *all* quality gates green **and** the code runs `npm test && supabase db lint` without error.

---




