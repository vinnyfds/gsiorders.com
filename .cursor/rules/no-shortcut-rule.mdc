---
description: 
globs: 
alwaysApply: true
---
# 🎯 **CRITICAL RULE: NO SHORTCUTS OR SIMPLIFIED VERSIONS**


---

## **🚫 ANTI-SHORTCUT ENFORCEMENT RULES**

### **NEVER COMPROMISE ON SPECIFICATIONS**

```typescript
/**
 * CURSOR AI ABSOLUTE RULE: 
 * NEVER create simplified/dumbed-down versions just to "pass tests" or "get something working"
 */

const noShortcutRules = {
  // FORBIDDEN BEHAVIORS:
  forbidden: [
    '❌ Creating "basic version" when full version is specified',
    '❌ Removing features to make implementation easier', 
    '❌ Using placeholder/mock data instead of real integration',
    '❌ Skipping error handling because "it works without it"',
    '❌ Omitting responsive design because "desktop works"',
    '❌ Hardcoding values instead of dynamic implementation',
    '❌ Creating fake success responses to pass tests',
    '❌ Removing TypeScript types to avoid complexity'
  ],

  // REQUIRED BEHAVIORS:
  required: [
    '✅ Implement FULL functionality as specified',
    '✅ Meet ALL success criteria before marking complete',
    '✅ Handle ALL edge cases and error scenarios', 
    '✅ Include ALL responsive breakpoints',
    '✅ Implement ALL accessibility requirements',
    '✅ Use REAL data integration, not mocks',
    '✅ Add COMPLETE TypeScript type coverage',
    '✅ Follow ALL project patterns and standards'
  ]
};
```

### **Specification Adherence Validation**

```typescript
const specificationAdherenceRules = {
  // BEFORE marking ANY task complete, validate:
  
  fullFunctionalityCheck: {
    // Example: CartModal.tsx requirements
    specified: [
      'Shows cart items with product details',
      'Quantity controls (+ and - buttons)', 
      'Remove item functionality',
      'Cart total calculation',
      'Checkout button integration',
      'Empty cart state handling',
      'Loading states for all operations',
      'Error handling for failed operations',
      'Mobile responsive design',
      'Accessibility compliance'
    ],
    
    // FORBIDDEN shortcuts:
    notAcceptable: [
      '❌ "Simple list without quantity controls"',
      '❌ "Static total without real calculation"', 
      '❌ "Checkout button that just console.logs"',
      '❌ "No error handling - will add later"',
      '❌ "Works on desktop only for now"',
      '❌ "Mock data instead of real cart integration"'
    ],

    validation: `
      // CURSOR AI MUST verify EVERY requirement:
      const validateCartModal = {
        ✅ cartItemsDisplay: 'Shows real cart data from useCart hook',
        ✅ quantityControls: 'Working + and - buttons that update cart',
        ✅ removeItem: 'Remove button that calls removeFromCart API',
        ✅ totalCalculation: 'Real-time total based on actual prices',
        ✅ checkoutIntegration: 'Button creates actual Stripe session',
        ✅ emptyState: 'Shows proper empty cart message and CTA',
        ✅ loadingStates: 'All buttons disable during API calls',
        ✅ errorHandling: 'Shows user-friendly error messages',
        ✅ mobileResponsive: 'Works perfectly on 375px screen',
        ✅ accessibility: 'Screen reader compatible with ARIA labels'
      };
      
      // IF ANY ✅ is false, task is NOT COMPLETE
    `
  }
};
```

---

## **💪 FULL IMPLEMENTATION ENFORCEMENT**

### **Quality Over Speed Rules**

```typescript
const qualityOverSpeedRules = {
  // WRONG MINDSET vs RIGHT MINDSET:
  
  wrongApproach: {
    thinking: 'This is complex, let me make a simple version first',
    actions: [
      'Creating basic UI without real functionality',
      'Hardcoding responses instead of API integration',
      'Skipping edge cases and error handling',
      'Making it work only for happy path',
      'Planning to "improve it later"'
    ],
    result: 'INCOMPLETE, LOW-QUALITY IMPLEMENTATION'
  },

  rightApproach: {
    thinking: 'This is complex, let me break it into proper steps and implement fully',
    actions: [
      'Analyze requirements thoroughly',
      'Plan implementation with all edge cases',
      'Implement step-by-step but completely',
      'Test each piece thoroughly',
      'Ensure integration works end-to-end'
    ],
    result: 'COMPLETE, PRODUCTION-READY IMPLEMENTATION'
  },

  timeManagement: `
    // CURSOR AI RULE: If task is taking longer than estimated:
    // ❌ DON'T: Reduce scope or create simplified version
    // ✅ DO: Document the complexity, ask for help, or extend timeline
    // ✅ DO: Break into smaller sub-tasks if needed
    // ✅ DO: Implement fully even if it takes extra time
  `
};
```

### **No Mock/Placeholder Rules**

```typescript
const noMockDataRules = {
  // CURSOR AI MUST use real implementations:
  
  realIntegration: {
    // ❌ FORBIDDEN: Mock/fake implementations
    forbidden: [
      'const mockCartItems = [{ id: "1", name: "Test Product" }]',
      'const checkout = () => console.log("Would redirect to Stripe")',
      'const addToCart = () => alert("Added to cart!")',
      'if (loading) return <div>Loading...</div> // fake loading'
    ],

    // ✅ REQUIRED: Real implementations  
    required: [
      'const { cart, addToCart, isLoading } = useCart(); // real hook',
      'const handleCheckout = () => fetch("/api/checkout", { ... }); // real API',
      'const handleAddToCart = async (id) => await addToCart(id); // real function',
      'if (isLoading) return <LoadingSkeleton />; // real loading UI'
    ]
  },

  realDataFlow: {
    // End-to-end real functionality required:
    example: `
      // CART MODAL REAL IMPLEMENTATION REQUIRED:
      
      ✅ Real cart data from Supabase
      ✅ Real quantity updates via API calls  
      ✅ Real total calculation from actual prices
      ✅ Real checkout button that creates Stripe session
      ✅ Real error handling for failed API calls
      ✅ Real loading states during operations
      ✅ Real empty state when cart is empty
      
      // NOT ACCEPTABLE:
      ❌ Hardcoded cart items
      ❌ Fake quantity controls that don't persist
      ❌ Static total that doesn't update
      ❌ Checkout button that just logs to console
      ❌ No error handling
      ❌ Fake loading states
    `
  }
};
```

---

## **🎯 SUCCESS CRITERIA ENFORCEMENT**

### **Binary Success Validation**

```typescript
const binarySuccessRules = {
  // Task completion is BINARY: Either 100% complete or NOT complete
  
  completionStandards: {
    // NO partial credit, NO "good enough", NO "works mostly"
    rule: 'SUCCESS CRITERIA MUST BE 100% MET',
    
    examples: {
      // CartModal.tsx success criteria:
      cartModal: {
        required: [
          'Displays cart items with product images, names, prices',
          'Quantity controls update cart via API and persist',
          'Remove buttons delete items via API',
          'Total calculates correctly and updates in real-time',
          'Checkout button creates real Stripe session',
          'Empty state shows when cart is empty',
          'Loading states during all async operations',
          'Error messages for failed operations',
          'Mobile responsive design (375px+)',
          'Keyboard navigation works',
          'Screen reader accessible'
        ],
        
        validation: `
          // EVERY item must be ✅ before task is complete:
          const allRequirementsMet = required.every(req => 
            implementationMeets(req) === true
          );
          
          if (!allRequirementsMet) {
            taskStatus = 'INCOMPLETE - Continue working';
            // DO NOT mark as done or create simplified version
          }
        `
      }
    }
  },

  // NO EXCUSES allowed for incomplete implementation:
  noExcusesPolicy: [
    '❌ "It mostly works" - NOT ACCEPTABLE',
    '❌ "Good enough for now" - NOT ACCEPTABLE', 
    '❌ "Can improve later" - NOT ACCEPTABLE',
    '❌ "Basic version is ready" - NOT ACCEPTABLE',
    '❌ "Complex parts can wait" - NOT ACCEPTABLE',
    '❌ "Tests are passing" (with shortcuts) - NOT ACCEPTABLE'
  ]
};
```

### **Implementation Depth Requirements**

```typescript
const implementationDepthRules = {
  // CURSOR AI must implement to production-ready depth:
  
  productionReadyStandards: {
    // EVERY feature must include:
    required: [
      '✅ Full functionality as specified',
      '✅ Comprehensive error handling',
      '✅ Loading states for all async operations',
      '✅ Input validation and sanitization',
      '✅ Responsive design for all devices',
      '✅ Accessibility compliance (WCAG AA)',
      '✅ TypeScript type safety',
      '✅ Integration with existing systems',
      '✅ Performance optimization',
      '✅ Security considerations'
    ],

    // NOT ACCEPTABLE to skip:
    notAcceptable: [
      '❌ "Basic functionality without error handling"',
      '❌ "Works but not responsive"',
      '❌ "No loading states - will add later"', 
      '❌ "Hard-coded values for now"',
      '❌ "Not accessible yet"',
      '❌ "Any TypeScript - will type later"',
      '❌ "Doesn\'t integrate with existing code"'
    ]
  },

  exampleStandard: `
    // EXAMPLE: ProductCard component requirements
    
    // ❌ NOT ACCEPTABLE (simplified version):
    const ProductCard = ({ product }) => (
      <div>
        <img src={product.image} />
        <h3>{product.name}</h3>
        <p>${product.price}</p>
        <button onClick={() => alert('Added!')}>Add to Cart</button>
      </div>
    );
    
    // ✅ REQUIRED (full implementation):
    const ProductCard: React.FC<ProductCardProps> = ({ 
      product, 
      onAddToCart, 
      className,
      ...rest 
    }) => {
      const [isLoading, setIsLoading] = useState(false);
      const [error, setError] = useState<string | null>(null);
      
      const handleAddToCart = async () => {
        try {
          setIsLoading(true);
          setError(null);
          await onAddToCart(product.id);
        } catch (err) {
          setError('Failed to add to cart. Please try again.');
        } finally {
          setIsLoading(false);
        }
      };
      
      return (
        <article 
          className={cn('product-card', className)}
          data-testid="product-card"
          {...rest}
        >
          <img 
            src={product.image || '/placeholder.jpg'}
            alt={product.name}
            className="product-image"
            loading="lazy"
          />
          <h3 className="heading-3">{product.name}</h3>
          <p className="text-brand-primary font-semibold">
            ${product.price.toFixed(2)}
          </p>
          {error && (
            <p className="text-error text-sm" role="alert">
              {error}
            </p>
          )}
          <button
            onClick={handleAddToCart}
            disabled={isLoading || product.inventory_count === 0}
            className="btn-primary w-full"
            aria-label={`Add ${product.name} to cart`}
          >
            {isLoading ? 'Adding...' : 'Add to Cart'}
          </button>
        </article>
      );
    };
  `
};
```

---

## **⚡ COMPLEXITY HANDLING RULES**

### **When Implementation Gets Difficult**

```typescript
const complexityHandlingRules = {
  // WHEN task becomes more complex than expected:
  
  properResponse: [
    '✅ ANALYZE: Break down into smaller logical steps',
    '✅ RESEARCH: Look for existing patterns in codebase',
    '✅ PLAN: Document approach before coding',
    '✅ IMPLEMENT: Build piece by piece, test each piece',
    '✅ INTEGRATE: Ensure it works with existing systems',
    '✅ VERIFY: Test all edge cases and error scenarios'
  ],

  wrongResponse: [
    '❌ Reduce functionality to make it easier',
    '❌ Skip error handling to get basic version working',
    '❌ Use placeholder/mock data instead of real integration',
    '❌ Make it work only for happy path',
    '❌ Skip responsive design because it\'s complex',
    '❌ Remove TypeScript types because they\'re hard'
  ],

  escalationProcess: `
    // IF task is genuinely too complex for single implementation:
    
    1. ✅ DOCUMENT the complexity and specific challenges
    2. ✅ BREAK DOWN into logical sub-tasks
    3. ✅ IMPLEMENT each sub-task completely
    4. ✅ INTEGRATE sub-tasks into working whole
    5. ✅ TEST the complete implementation
    
    // NEVER:
    ❌ Create incomplete version and call it done
    ❌ Skip requirements to make it simpler
    ❌ Plan to "finish it later"
  `
};
```

### **Quality Gate Enforcement**

```typescript
const qualityGateRules = {
  // MANDATORY quality gates before task completion:
  
  mustPass: [
    '🎯 ALL requirements implemented',
    '🔍 ALL edge cases handled',
    '⚡ ALL loading states working',
    '🚨 ALL error scenarios covered',
    '📱 ALL responsive breakpoints working',
    '♿ ALL accessibility requirements met',
    '🔗 ALL integrations working end-to-end',
    '🧪 ALL tests passing (including manual testing)',
    '📖 ALL documentation updated',
    '✨ ALL code follows project patterns'
  ],

  // IF ANY gate fails:
  failureResponse: 'CONTINUE WORKING - Task is NOT complete',
  
  // NO EXCEPTIONS for:
  noExceptions: [
    'Time pressure',
    'Complexity',
    'Testing difficulties', 
    '"Good enough" mentality',
    'Desire to move to next task',
    'Frustration with implementation'
  ]
};
```

---

**✅ CURSOR AI ANTI-SHORTCUT RULES SUMMARY:**

- [x] **NEVER create simplified versions** just to pass tests
- [x] **ALWAYS implement full functionality** as specified  
- [x] **NO mock/placeholder implementations** - real integration only
- [x] **100% success criteria required** before marking complete
- [x] **Production-ready depth mandatory** for all features
- [x] **Quality over speed enforcement** 
- [x] **Proper complexity handling** without compromising requirements
- [x] **Binary completion standards** - either 100% done or not done

**🎯 Cursor AI will now maintain full specification adherence and NEVER compromise on quality to get "something working"!**


